

# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new cartesian style
# printer. For delta style printers, see the "example-delta.cfg"
# file. For corexy/h-bot style printers, see the "example-corexy.cfg"
# file. Only common config sections are described here - see the
# "example-extras.cfg" file for configuring less common devices.

# DO NOT COPY THIS FILE WITHOUT CAREFULLY READING AND UPDATING IT
# FIRST. Incorrectly configured parameters may cause damage.

# A note on pin names: pins may be configured with a hardware name
# (such as "PA4") or with an Arduino alias name (such as "ar29" or
# "analog3"). In order to use Arduino names, the pin_map variable in
# the mcu section must be present and have a value of "arduino". Pin
# names may be preceded by an '!' to indicate that a reverse polarity
# should be used (eg, trigger on low instead of high). Input pins may
# be preceded by a '^' to indicate that a hardware pull-up resistor
# should be enabled for the pin. If the micro-controller supports
# pull-down resistors then an input pin may alternatively be preceded
# by a '~'.


# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_x]
step_pin: PB11
dir_pin: PB10
enable_pin: tmc2209_stepper_x:virtual_enable
step_distance: .005
endstop_pin: tmc2209_stepper_x:virtual_endstop
#position_min: 0
position_endstop: 0
position_max: 150
homing_speed: 20.0
#homing_retract_dist: 5.0
#second_homing_speed:
#homing_positive_dir:

[stepper_y]
step_pin: PB15
dir_pin: PB14
enable_pin: tmc2209_stepper_y:virtual_enable
step_distance: .005
endstop_pin: tmc2209_stepper_y:virtual_endstop
#position_min: 0
position_endstop: 180
position_max: 180
homing_speed: 20.0
#homing_retract_dist: 5.0
#second_homing_speed:
homing_positive_dir: True

[stepper_z]
step_pin: PA19
dir_pin: PA18
enable_pin: tmc2209_stepper_z:virtual_enable
step_distance: .0005
endstop_pin: probe:z_virtual_endstop
position_max: 100
#homing_speed: 5.0
#homing_retract_dist: 5.0
#second_homing_speed:
#homing_positive_dir:


[extruder]
step_pin: PA21
dir_pin: !PA20
enable_pin: tmc2209_extruder:virtual_enable
step_distance: .001
nozzle_diameter: 0.400
filament_diameter: 1.75
#max_extrude_cross_section:
#max_extrude_only_distance: 50.0
#max_extrude_only_velocity:
#max_extrude_only_accel:
#pressure_advance: 0.0
#pressure_advance_lookahead_time: 0.010
heater_pin: PA12
#max_power: 1.0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA3
#pullup_resistor: 4700
#inline_resistor: 0
#adc_voltage: 5.0
#smooth_time: 2.0
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
#pid_integral_max:
#pwm_cycle_time: 0.100
#min_extrude_temp: 170
min_temp: 0
max_temp: 210

[heater_fan my_nozzle_fan]
pin:PA8

# The heater_bed section describes a heated bed (if present - omit
# section if not present).
[heater_bed]
heater_pin: PA13
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PB4
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
#pid_integral_max:
#pwm_cycle_time: 0.0001
#max_power: 0.1
#control: watermark
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
min_temp: 0
max_temp: 120


# Micro-controller information.
[mcu]
serial: /dev/ttyACM0
#baud: 250000
#pin_map: arduino
#restart_method:


[printer]
kinematics: corexy
max_velocity: 500
max_accel: 3000
#max_accel_to_decel:
max_z_velocity: 25
max_z_accel: 30
#square_corner_velocity: 5.0


[tmc2209 stepper_x]
uart_pin: PB12
microsteps: 32
run_current: 0.5
hold_current: 0.3
sense_resistor: 0.12
driver_SGTHRS: 55
stealthchop_threshold: 1000
diag_pin: PB13

[tmc2209 stepper_y]
uart_pin: PA14
microsteps: 32
run_current: 0.5
hold_current: 0.3
sense_resistor: 0.12
driver_SGTHRS: 55
stealthchop_threshold: 1000
diag_pin: PA15

[tmc2209 stepper_z]
uart_pin: PB16
microsteps: 32
run_current: 0.5
hold_current: 0.3
sense_resistor: 0.12
driver_SGTHRS: 0
diag_pin: PB17

[tmc2209 extruder]
uart_pin: PA22
microsteps: 32
run_current: 1.0
hold_current: 0.1
sense_resistor: 0.12
driver_SGTHRS: 0
diag_pin: PA23


# Z height probe. One may define this section to enable Z height
# probing hardware. When this section is enabled, PROBE and
# QUERY_PROBE extended g-code commands become available. The probe
# section also creates a virtual "probe:z_virtual_endstop" pin. One
# may set the stepper_z endstop_pin to this virtual pin on cartesian
# style printers that use the probe in place of a z endstop. If using
# "probe:z_virtual_endstop" then do not define a position_endstop in
# the stepper_z config section.
[probe]
pin: !PB6
#   Probe detection pin. This parameter must be provided.
x_offset: 10
#   The distance (in mm) between the probe and the nozzle along the
#   x-axis. The default is 0.
y_offset: 0.0
#   The distance (in mm) between the probe and the nozzle along the
#   y-axis. The default is 0.
z_offset: 0.0


# Print cooling fan (omit section if fan not present).
[fan]
pin: PB8
#   PWM output pin controlling the fan. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when first enabling
#   it (helps get the fan spinning). The default is 0.100 seconds.
#off_below: 0.0
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
#
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.


[output_pin BEEPER_pin]
pin: PA16
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.00037
scale: 1000

[gcode_macro M300]
default_parameter_S: 1000
#   Use a default 1kHz tone if S is omitted.
default_parameter_P: 100
#   Use a 10ms duration is P is omitted.
gcode:
    SET_PIN PIN=BEEPER_pin VALUE={S}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0
